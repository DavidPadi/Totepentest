#!/usr/bin/env python
# -*- coding: utf-8 -*-

import shodan, sys, pygeoip, pprintpp,os, dns, pywhois, scrapy,nmap, requests,subprocess, dns.resolver
from past.builtins import raw_input
from termcolor import colored
from socket import *




class Recoleccion():


    def menu():
        print(colored("\nLicense GPL", 'green', attrs=['bold']))
        print(colored("--------------------------------------------------------------------------------",'green',attrs=['bold']))
        print(colored(" ______   ___   ______    ___  ____    ___  ____   ______    ___  _____ ______  ",'green',attrs=['bold']))
        print(colored("|      |Y     Y|      | /  [_ |  o  )/  [_ |  _  Y|      | /  [_(   \_ |      | ",'green',attrs=['bold']))
        print(colored("l_j  l_j|  O  |l_j  l_jY    _]|   _/Y    _]|  |  |l_j  l_jY    _]\__  Tl_j  l_j ",'green',attrs=['bold']))
        print(colored("  |  |  |     |  |  |  |   [_ |  |  |   [_ |  |  |  |  |  |   [_ /  \ |  |  |   ",'green',attrs=['bold']))
        print(colored("  |  |  l     !  |  |  |     T|  |  |     T|  |  |  |  |  |     T\    |  |  |   ",'green',attrs=['bold']))
        print(colored("  l__j   \___/   l__j  l_____jl__j  l_____jl__j__j  l__j  l_____j \___j  l__j   ",'green',attrs=['bold']))
        print(colored("                                                                                 ",'green',attrs=['bold']))
        print(colored("------------------------ RECOLECCION INFORMACION --------------------------------", 'green', attrs=['bold']))
        print(colored("\n1) Geolocalizacion\n2) DNS\n3) Escaneo\n4) Shodan Hacking\n5) Shodan facets\n6) Requests\n7) Sqlmap\n8) Salir", 'blue', attrs=['bold']))

    def geolocalizacion():
    	print(colored("\n***************** GEOLOCALIZACION ************************",'red',attrs=['bold']))
    	print("\n1) Busqueda por dominio\n2) Busqueda por IP\n3) Salir")

    while True:
    	menu()
    	try:
    		opcion=int(input("\nIntroduce un opcion: "))
    	except ValueError:
    		print ("No has seleccionado una opcion correcta")
    		menu()
    	if opcion == 1:
    		"""Utilizamos la base de datos GeoLite"""
    		gi = pygeoip.GeoIP('GeoLiteCity.dat')

    		geolocalizacion()
    		try:
    			opcion = int(input("Introduce un opcion: "))
    		except ValueError:
    			print("No has seleccionado una opcion correcta")
    		if opcion == 1:
    			dominio = input("Introduce un dominio del tipo (ejemplo: gmail.com): ")
    			print(colored("\n Código del pais del servidor por dominio: ", 'red', attrs=['bold', 'blink']) + gi.country_code_by_name(dominio))
    		elif opcion == 2:

    			try:
    				IP = input("Introduce una IP publica: ")
    				print(colored("\n Código del país del servidor por IP: ", 'red', attrs=['bold', 'blink']) + gi.country_code_by_addr(IP))
    				print(colored("\n Time zone del servidor por IP: ", 'red', attrs=['bold', 'blink']) + gi.time_zone_by_addr(IP))
    				print(colored("\n Información completa del servidor por IP: ", 'red', attrs=['bold', 'blink']))
    				pprintpp.pprint(gi.record_by_addr(IP))
    			except ValueError:
    				print("No has introducido una IP correcta")
    				geolocalizacion()
    		elif opcion == 3:
    			break
    	elif opcion == 2:
    		print(colored("\n***************** DNS ************************",'red',attrs=['bold']))
    		dominio = input("Introduce un dominio del tipo (ejemplo: gmail.com): ")
    		"""Consulta sobre registro IPV4"""
    		ansA = dns.resolver.query(dominio, 'A')

    		"""Consulta sobre registro IPV6"""
    		ansAAAA = dns.resolver.query(dominio, 'AAAA')

    		"""Consulta sobre registro MailServers"""
    		ansMX = dns.resolver.query(dominio, 'MX')

    		"""Consulta sobre registro NameServers"""
    		ansNS = dns.resolver.query(dominio, 'NS')

    		print(colored("\nRespuesta de DNS en IPV4: ", 'red', attrs=['bold', 'blink']))
    		print(ansA.response.to_text())

    		print(colored("\nRespuesta de DNS en IPV6: ", 'red', attrs=['bold', 'blink']))
    		print(ansAAAA.response.to_text())

    		print(colored("\nRespuesta de DNS en MailServers: ", 'red', attrs=['bold', 'blink']))
    		print(ansMX.response.to_text())

    		print(colored("\nRespuesta de DNS en NameServers: ", 'red', attrs=['bold', 'blink']))
    		print(ansNS.response.to_text())

    	elif opcion == 3:
    		print(colored("\n***************** ESCANEO ************************",'red',attrs=['bold']))
    		ip=raw_input("Introduce IP: ")
    		start=int(input("Introduce un puerto de inicio: "))
    		end=int(input("Introduce un puerto de fin: "))
    		print("Escaneando IP {} :".format(ip))
    		for port in range (start,end):
    			print("Probando puerto {} ... ".format(port))
    			s=socket(AF_INET,SOCK_STREAM)
    			s.settimeout(5)
    			if(s.connect_ex((ip,port))==0):
    				print ("Puerto ",port, "esta abierto")
    			s.close()
    		print("Escaneo finalizado")
    	elif opcion == 4:

    		print(colored("\n***************** SHODAN HACKING ************************",'red',attrs=['bold']))
    		# Clave de desarrollador de la API de shodan
    		ShodanKeyString = open('shodanKey').readline().rstrip('\n')

    		# Realizamos la conexion con la base de datos de Shodan
    		ShodanApi = shodan.Shodan(ShodanKeyString)

    		# Ponemos el código entre un try/catch para manejar las excepciones
    		try:
    			# Buscamos en Shodan con el método WebAPI.search()
    			parametro=input("Indique el parametro para realizar la busqueda en Shodan (ejemplo: smb): ")
    			resultados = ShodanApi.search(parametro)

    			# Mostramos el resultado
    			print('Cantidad de resultados encontrados: %s' % resultados['total'])
    			for i in resultados['matches']:
    				print(colored("IP: ", 'red', attrs=['bold']) + '%s' % i['ip_str'])
    				print(colored("Data: ", 'red', attrs=['bold']) + '%s' % i['data'])
    				print(colored("Hostnames: ", 'red', attrs=['bold']) + '%s' % i['hostnames'])
    				print(colored("Puerto: ", 'red', attrs=['bold']) + '%s' % i['port'])
    				print('')

    		except shodan.APIError as e:
    			print('Ups! Ha ocurrido un error: %s' % e)
    	elif opcion == 5:
    		print(colored("\n***************** SHODAN FACETS ************************",'red',attrs=['bold']))
    		# Clave de desarrollador de la API de shodan
    		ShodanKeyString = open('shodanKey').readline().rstrip('\n')

    		# Lista de propiedades que queremos mostrar.
    		# Por defecto se muestran los primeros 5 resultados.
    		FACETS = [
    			'org',
    			'domain',
    			'port',
    			'asn',
    			# Solo queremos mostrar el top 3 de paises.
    			# Por defecto se muestran 5!!!
    			# Si queremos mostrar mas de 5 indicamos ('country', 1000) para mostrar 1000, por ejemplo.
    			('country', 3),
    		]

    		FACET_TITLES = {
    			'org': 'Top 5 Organizaciones',
    			'domain': 'Top 5 Dominios',
    			'port': 'Top 5 Puertos',
    			'asn': 'Top 5 Sistemas Autonomos',
    			'country': 'Top 3 Paises',
    		}

    		# Setup API
    		api = shodan.Shodan(ShodanKeyString)
    		parametro = input("Indique el parametro para realizar la busqueda en Shodan (ejemplo: apache): ")
    		# Generamos la variable de la query con los argumentos.
    		query = ' '.join(parametro)

    		# Usamos el metoddo count() porque no devuelve resultados y no requiere un plan de pago.
    		# Y es mas rapido que ejecutar un search().
    		result = api.count(query, facets=FACETS)

    		print('Shodan Summary Information')
    		print('Query: %s' % query)
    		print('Resultados totales: %s\n' % result['total'])

    		# Imprime la informacion de los facets.
    		for facet in result['facets']:
    			print(colored(FACET_TITLES[facet], 'red', attrs=['bold']))

    			for term in result['facets'][facet]:
    				print(colored('\n%s: %s\n' % (term['value'], term['count']), 'blue', attrs=['bold']))

    	elif opcion == 6:
    		print(colored("\n***************** REQUESTS ************************",'red',attrs=['bold']))
    		url=input("Introduce una url (ejemplo: http://www.google.com): ")
    		response=requests.get(url)
    		status=response.status_code
    		print("El codigo de estado es: ", status)
    		cabeceras=response.headers
    		print("Las cabeceras son: ", cabeceras)
    		response_url=response.url
    		print("Respuesta url: ", response_url)
    	elif opcion == 7:
    		print(colored("\n***************** SQLMAP ************************", 'red', attrs=['bold']))
    		url=input("Introduce url (ejemplo: https://danceberry.ru/porno.php?id=394): ")
    		subprocess.call("sqlmap -u '%s' --dbs" %url, shell=True)

    	elif opcion== 8:
    		print("\nSaliendo...")
    		break

def main():
    Recoleccion()

if __name__ == '__main__':
    main()
